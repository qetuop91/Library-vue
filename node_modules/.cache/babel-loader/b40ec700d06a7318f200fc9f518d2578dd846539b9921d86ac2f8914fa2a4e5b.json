{"ast":null,"code":"import axios from \"axios\";\nimport { getToken } from \"@/utils/auth.js\";\nimport Cookies from \"js-cookie\";\nconst request = axios.create({\n  // baseURL: 'http://10.23.127.99:9090',\n  // baseURL: 'http://10.23.127.99:8080/LibraryManagement/api',\n  baseURL: 'http://localhost:8080/api',\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  if (localStorage.getItem(\"token\")) {\n    config.headers.Authorization = localStorage.getItem(\"token\");\n  }\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  config.headers['token'] = getToken(); //设置请求头\n  //新增\n  config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","getToken","Cookies","request","create","baseURL","timeout","interceptors","use","config","localStorage","getItem","headers","Authorization","error","Promise","reject","response","res","data","JSON","parse","console","log"],"sources":["F:/Vue/library-management/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {getToken} from \"@/utils/auth.js\"\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst request = axios.create({\r\n    // baseURL: 'http://10.23.127.99:9090',\r\n    // baseURL: 'http://10.23.127.99:8080/LibraryManagement/api',\r\n    baseURL: 'http://localhost:8080/api',\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    if(localStorage.getItem(\"token\")) {\r\n        config.headers.Authorization = localStorage.getItem(\"token\")\r\n    }\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    config.headers['token'] = getToken(); //设置请求头\r\n    //新增\r\n    config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n\r\n\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,iBAAiB;AACxC,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzB;EACA;EACAC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvC,IAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IAC9BF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGH,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAChE;EACAF,MAAM,CAACG,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjEH,MAAM,CAACG,OAAO,CAAC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC;EACAQ,MAAM,CAACG,OAAO,CAAC,6BAA6B,CAAC,GAAG,GAAG;EAInD,OAAOH,MAAM;AACjB,CAAC,EAAEK,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAX,OAAO,CAACI,YAAY,CAACU,QAAQ,CAACT,GAAG,CAC7BS,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLQ,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGT,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeX,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}