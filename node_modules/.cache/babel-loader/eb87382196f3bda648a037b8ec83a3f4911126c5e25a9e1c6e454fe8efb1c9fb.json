{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\";\nimport axios from 'axios';\nexport default {\n  name: \"Login\",\n  data() {\n    return {\n      admin: {}\n    };\n  },\n  methods: {\n    login() {\n      request.post('/admin/login', this.admin).then(res => {\n        // console.log(\"test\")\n        if (res.code === 200) {\n          // localStorage.setItem(\"token\", res.data.token)\n          this.$notify.success(\"登录成功\");\n          axios.interceptors.request.use(function (config) {\n            config.headers = {\n              'X-Requested-With': 'XMLHttpRequest',\n              'Content-Type': 'application/json'\n            };\n            //注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n            const token = res.data.token; //这里取token之前，你肯定需要先拿到token,存一下\n            sessionStorage.setItem('token', token); //这里取token之前，你肯定需要先拿到token,存一下\n            localStorage.setItem('token', token); //这里取token之前，你肯定需要先拿到token,存一下\n            if (token) {\n              //  config.params = {'token':token} //如果要求携带在参数中\n              config.headers.Authorization = token; //如果要求携带在请求头中\n            }\n            // 在发送请求之前做些什么\n            return config;\n          }, function (error) {\n            // 对请求错误做些什么\n            return Promise.reject(error);\n          });\n\n          // 添加响应拦截器\n          axios.interceptors.response.use(function (response) {\n            // 对响应数据做点什么\n            return response.data;\n          }, function (error) {\n            // 对响应错误做点什么\n            return Promise.reject(error);\n          });\n          this.$router.push('/');\n          console.log(res);\n        } else {\n          this.$notify.error(res.msg);\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","axios","name","data","admin","methods","login","post","then","res","code","$notify","success","interceptors","use","config","headers","token","sessionStorage","setItem","localStorage","Authorization","error","Promise","reject","response","$router","push","console","log","msg"],"sources":["src/views/login/Login.vue"],"sourcesContent":["<template>\r\n  <div style=\"height: 100vh\">\r\n    <div\r\n        style=\"width: 500px; height: 400px; background-color: white; border-radius: 10px;margin: 150px auto; padding: 40px 50px\">\r\n      <div style=\"margin: 30px; text-align: center;font-size: 30px; font-weight: bold; color: dodgerblue\">登 录</div>\r\n      <el-form :model=\"admin\" ref=\"loginForm\">\r\n        <el-form-item prop=\"username\">\r\n          <el-input placeholder=\"请输入账号\" prefix-icon=\"el-icon-user\" size=\"medium\" v-model=\"admin.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item prop=\"password\">\r\n          <el-input placeholder=\"请输入密码\" show-password prefix-icon=\"el-icon-user\" size=\"medium\" v-model=\"admin.password\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button style=\"width: 100%\" size=\"medium\" type=\"primary\" @click=\"login\">登录</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";\r\n\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  name: \"Login\",\r\n  data() {\r\n    return {\r\n      admin: {}\r\n    }\r\n  },\r\n  methods: {\r\n    login() {\r\n      request.post('/admin/login', this.admin).then(res => {\r\n        // console.log(\"test\")\r\n        if (res.code === 200) {\r\n          // localStorage.setItem(\"token\", res.data.token)\r\n          this.$notify.success(\"登录成功\")\r\n\r\n          axios.interceptors.request.use(function (config) {\r\n            config.headers = {\r\n              'X-Requested-With': 'XMLHttpRequest',\r\n              'Content-Type': 'application/json'\r\n            };\r\n            //注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\r\n            const token = res.data.token //这里取token之前，你肯定需要先拿到token,存一下\r\n            sessionStorage.setItem('token', token) //这里取token之前，你肯定需要先拿到token,存一下\r\n            localStorage.setItem('token', token) //这里取token之前，你肯定需要先拿到token,存一下\r\n            if (token) {\r\n              //  config.params = {'token':token} //如果要求携带在参数中\r\n              config.headers.Authorization = token; //如果要求携带在请求头中\r\n            }\r\n            // 在发送请求之前做些什么\r\n            return config;\r\n          }, function (error) {\r\n            // 对请求错误做些什么\r\n            return Promise.reject(error);\r\n          });\r\n\r\n// 添加响应拦截器\r\n          axios.interceptors.response.use(function (response) {\r\n            // 对响应数据做点什么\r\n            return response.data;\r\n          }, function (error) {\r\n            // 对响应错误做点什么\r\n            return Promise.reject(error);\r\n          });\r\n\r\n          this.$router.push('/')\r\n          console.log(res)\r\n        } else {\r\n          this.$notify.error(res.msg)\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";AAqBA,OAAAA,OAAA;AAEA,OAAAC,KAAA;AAMA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,MAAA;MACAN,OAAA,CAAAO,IAAA,sBAAAH,KAAA,EAAAI,IAAA,CAAAC,GAAA;QACA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA;UACA,KAAAC,OAAA,CAAAC,OAAA;UAEAX,KAAA,CAAAY,YAAA,CAAAb,OAAA,CAAAc,GAAA,WAAAC,MAAA;YACAA,MAAA,CAAAC,OAAA;cACA;cACA;YACA;YACA;YACA,MAAAC,KAAA,GAAAR,GAAA,CAAAN,IAAA,CAAAc,KAAA;YACAC,cAAA,CAAAC,OAAA,UAAAF,KAAA;YACAG,YAAA,CAAAD,OAAA,UAAAF,KAAA;YACA,IAAAA,KAAA;cACA;cACAF,MAAA,CAAAC,OAAA,CAAAK,aAAA,GAAAJ,KAAA;YACA;YACA;YACA,OAAAF,MAAA;UACA,aAAAO,KAAA;YACA;YACA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,KAAA;UACA;;UAEA;UACArB,KAAA,CAAAY,YAAA,CAAAY,QAAA,CAAAX,GAAA,WAAAW,QAAA;YACA;YACA,OAAAA,QAAA,CAAAtB,IAAA;UACA,aAAAmB,KAAA;YACA;YACA,OAAAC,OAAA,CAAAC,MAAA,CAAAF,KAAA;UACA;UAEA,KAAAI,OAAA,CAAAC,IAAA;UACAC,OAAA,CAAAC,GAAA,CAAApB,GAAA;QACA;UACA,KAAAE,OAAA,CAAAW,KAAA,CAAAb,GAAA,CAAAqB,GAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}