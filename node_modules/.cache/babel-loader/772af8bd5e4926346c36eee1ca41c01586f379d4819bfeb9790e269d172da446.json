{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __extends } from \"tslib\";\nimport * as util from './core/util.js';\nimport * as vec2 from './core/vector.js';\nimport Draggable from './mixin/Draggable.js';\nimport Eventful from './core/Eventful.js';\nimport * as eventTool from './core/event.js';\nimport { GestureMgr } from './core/GestureMgr.js';\nimport BoundingRect from './core/BoundingRect.js';\nvar SILENT = 'silent';\nfunction makeEventPacket(eveType, targetInfo, event) {\n  return {\n    type: eveType,\n    event: event,\n    target: targetInfo.target,\n    topTarget: targetInfo.topTarget,\n    cancelBubble: false,\n    offsetX: event.zrX,\n    offsetY: event.zrY,\n    gestureEvent: event.gestureEvent,\n    pinchX: event.pinchX,\n    pinchY: event.pinchY,\n    pinchScale: event.pinchScale,\n    wheelDelta: event.zrDelta,\n    zrByTouch: event.zrByTouch,\n    which: event.which,\n    stop: stopEvent\n  };\n}\nfunction stopEvent() {\n  eventTool.stop(this.event);\n}\nvar EmptyProxy = function (_super) {\n  __extends(EmptyProxy, _super);\n  function EmptyProxy() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.handler = null;\n    return _this;\n  }\n  EmptyProxy.prototype.dispose = function () {};\n  EmptyProxy.prototype.setCursor = function () {};\n  return EmptyProxy;\n}(Eventful);\nvar HoveredResult = function () {\n  function HoveredResult(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  return HoveredResult;\n}();\nvar handlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\nvar tmpRect = new BoundingRect(0, 0, 0, 0);\nvar Handler = function (_super) {\n  __extends(Handler, _super);\n  function Handler(storage, painter, proxy, painterRoot, pointerSize) {\n    var _this = _super.call(this) || this;\n    _this._hovered = new HoveredResult(0, 0);\n    _this.storage = storage;\n    _this.painter = painter;\n    _this.painterRoot = painterRoot;\n    _this._pointerSize = pointerSize;\n    proxy = proxy || new EmptyProxy();\n    _this.proxy = null;\n    _this.setHandlerProxy(proxy);\n    _this._draggingMgr = new Draggable(_this);\n    return _this;\n  }\n  Handler.prototype.setHandlerProxy = function (proxy) {\n    if (this.proxy) {\n      this.proxy.dispose();\n    }\n    if (proxy) {\n      util.each(handlerNames, function (name) {\n        proxy.on && proxy.on(name, this[name], this);\n      }, this);\n      proxy.handler = this;\n    }\n    this.proxy = proxy;\n  };\n  Handler.prototype.mousemove = function (event) {\n    var x = event.zrX;\n    var y = event.zrY;\n    var isOutside = isOutsideBoundary(this, x, y);\n    var lastHovered = this._hovered;\n    var lastHoveredTarget = lastHovered.target;\n    if (lastHoveredTarget && !lastHoveredTarget.__zr) {\n      lastHovered = this.findHover(lastHovered.x, lastHovered.y);\n      lastHoveredTarget = lastHovered.target;\n    }\n    var hovered = this._hovered = isOutside ? new HoveredResult(x, y) : this.findHover(x, y);\n    var hoveredTarget = hovered.target;\n    var proxy = this.proxy;\n    proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : 'default');\n    if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {\n      this.dispatchToElement(lastHovered, 'mouseout', event);\n    }\n    this.dispatchToElement(hovered, 'mousemove', event);\n    if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {\n      this.dispatchToElement(hovered, 'mouseover', event);\n    }\n  };\n  Handler.prototype.mouseout = function (event) {\n    var eventControl = event.zrEventControl;\n    if (eventControl !== 'only_globalout') {\n      this.dispatchToElement(this._hovered, 'mouseout', event);\n    }\n    if (eventControl !== 'no_globalout') {\n      this.trigger('globalout', {\n        type: 'globalout',\n        event: event\n      });\n    }\n  };\n  Handler.prototype.resize = function () {\n    this._hovered = new HoveredResult(0, 0);\n  };\n  Handler.prototype.dispatch = function (eventName, eventArgs) {\n    var handler = this[eventName];\n    handler && handler.call(this, eventArgs);\n  };\n  Handler.prototype.dispose = function () {\n    this.proxy.dispose();\n    this.storage = null;\n    this.proxy = null;\n    this.painter = null;\n  };\n  Handler.prototype.setCursorStyle = function (cursorStyle) {\n    var proxy = this.proxy;\n    proxy.setCursor && proxy.setCursor(cursorStyle);\n  };\n  Handler.prototype.dispatchToElement = function (targetInfo, eventName, event) {\n    targetInfo = targetInfo || {};\n    var el = targetInfo.target;\n    if (el && el.silent) {\n      return;\n    }\n    var eventKey = 'on' + eventName;\n    var eventPacket = makeEventPacket(eventName, targetInfo, event);\n    while (el) {\n      el[eventKey] && (eventPacket.cancelBubble = !!el[eventKey].call(el, eventPacket));\n      el.trigger(eventName, eventPacket);\n      el = el.__hostTarget ? el.__hostTarget : el.parent;\n      if (eventPacket.cancelBubble) {\n        break;\n      }\n    }\n    if (!eventPacket.cancelBubble) {\n      this.trigger(eventName, eventPacket);\n      if (this.painter && this.painter.eachOtherLayer) {\n        this.painter.eachOtherLayer(function (layer) {\n          if (typeof layer[eventKey] === 'function') {\n            layer[eventKey].call(layer, eventPacket);\n          }\n          if (layer.trigger) {\n            layer.trigger(eventName, eventPacket);\n          }\n        });\n      }\n    }\n  };\n  Handler.prototype.findHover = function (x, y, exclude) {\n    var list = this.storage.getDisplayList();\n    var out = new HoveredResult(x, y);\n    setHoverTarget(list, out, x, y, exclude);\n    if (this._pointerSize && !out.target) {\n      var candidates = [];\n      var pointerSize = this._pointerSize;\n      var targetSizeHalf = pointerSize / 2;\n      var pointerRect = new BoundingRect(x - targetSizeHalf, y - targetSizeHalf, pointerSize, pointerSize);\n      for (var i = list.length - 1; i >= 0; i--) {\n        var el = list[i];\n        if (el !== exclude && !el.ignore && !el.ignoreCoarsePointer && (!el.parent || !el.parent.ignoreCoarsePointer)) {\n          tmpRect.copy(el.getBoundingRect());\n          if (el.transform) {\n            tmpRect.applyTransform(el.transform);\n          }\n          if (tmpRect.intersect(pointerRect)) {\n            candidates.push(el);\n          }\n        }\n      }\n      if (candidates.length) {\n        var rStep = 4;\n        var thetaStep = Math.PI / 12;\n        var PI2 = Math.PI * 2;\n        for (var r = 0; r < targetSizeHalf; r += rStep) {\n          for (var theta = 0; theta < PI2; theta += thetaStep) {\n            var x1 = x + r * Math.cos(theta);\n            var y1 = y + r * Math.sin(theta);\n            setHoverTarget(candidates, out, x1, y1, exclude);\n            if (out.target) {\n              return out;\n            }\n          }\n        }\n      }\n    }\n    return out;\n  };\n  Handler.prototype.processGesture = function (event, stage) {\n    if (!this._gestureMgr) {\n      this._gestureMgr = new GestureMgr();\n    }\n    var gestureMgr = this._gestureMgr;\n    stage === 'start' && gestureMgr.clear();\n    var gestureInfo = gestureMgr.recognize(event, this.findHover(event.zrX, event.zrY, null).target, this.proxy.dom);\n    stage === 'end' && gestureMgr.clear();\n    if (gestureInfo) {\n      var type = gestureInfo.type;\n      event.gestureEvent = type;\n      var res = new HoveredResult();\n      res.target = gestureInfo.target;\n      this.dispatchToElement(res, type, gestureInfo.event);\n    }\n  };\n  return Handler;\n}(Eventful);\nutil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  Handler.prototype[name] = function (event) {\n    var x = event.zrX;\n    var y = event.zrY;\n    var isOutside = isOutsideBoundary(this, x, y);\n    var hovered;\n    var hoveredTarget;\n    if (name !== 'mouseup' || !isOutside) {\n      hovered = this.findHover(x, y);\n      hoveredTarget = hovered.target;\n    }\n    if (name === 'mousedown') {\n      this._downEl = hoveredTarget;\n      this._downPoint = [event.zrX, event.zrY];\n      this._upEl = hoveredTarget;\n    } else if (name === 'mouseup') {\n      this._upEl = hoveredTarget;\n    } else if (name === 'click') {\n      if (this._downEl !== this._upEl || !this._downPoint || vec2.dist(this._downPoint, [event.zrX, event.zrY]) > 4) {\n        return;\n      }\n      this._downPoint = null;\n    }\n    this.dispatchToElement(hovered, name, event);\n  };\n});\nfunction isHover(displayable, x, y) {\n  if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {\n    var el = displayable;\n    var isSilent = void 0;\n    var ignoreClip = false;\n    while (el) {\n      if (el.ignoreClip) {\n        ignoreClip = true;\n      }\n      if (!ignoreClip) {\n        var clipPath = el.getClipPath();\n        if (clipPath && !clipPath.contain(x, y)) {\n          return false;\n        }\n      }\n      if (el.silent) {\n        isSilent = true;\n      }\n      var hostEl = el.__hostTarget;\n      el = hostEl ? hostEl : el.parent;\n    }\n    return isSilent ? SILENT : true;\n  }\n  return false;\n}\nfunction setHoverTarget(list, out, x, y, exclude) {\n  for (var i = list.length - 1; i >= 0; i--) {\n    var el = list[i];\n    var hoverCheckResult = void 0;\n    if (el !== exclude && !el.ignore && (hoverCheckResult = isHover(el, x, y))) {\n      !out.topTarget && (out.topTarget = el);\n      if (hoverCheckResult !== SILENT) {\n        out.target = el;\n        break;\n      }\n    }\n  }\n}\nfunction isOutsideBoundary(handlerInstance, x, y) {\n  var painter = handlerInstance.painter;\n  return x < 0 || x > painter.getWidth() || y < 0 || y > painter.getHeight();\n}\nexport default Handler;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}