{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Path from '../Path.js';\nimport * as roundRectHelper from '../helper/roundRect.js';\nimport { subPixelOptimizeRect } from '../helper/subPixelOptimize.js';\nvar RectShape = function () {\n  function RectShape() {\n    this.x = 0;\n    this.y = 0;\n    this.width = 0;\n    this.height = 0;\n  }\n  return RectShape;\n}();\nexport { RectShape };\nvar subPixelOptimizeOutputShape = {};\nvar Rect = function (_super) {\n  __extends(Rect, _super);\n  function Rect(opts) {\n    return _super.call(this, opts) || this;\n  }\n  Rect.prototype.getDefaultShape = function () {\n    return new RectShape();\n  };\n  Rect.prototype.buildPath = function (ctx, shape) {\n    var x;\n    var y;\n    var width;\n    var height;\n    if (this.subPixelOptimize) {\n      var optimizedShape = subPixelOptimizeRect(subPixelOptimizeOutputShape, shape, this.style);\n      x = optimizedShape.x;\n      y = optimizedShape.y;\n      width = optimizedShape.width;\n      height = optimizedShape.height;\n      optimizedShape.r = shape.r;\n      shape = optimizedShape;\n    } else {\n      x = shape.x;\n      y = shape.y;\n      width = shape.width;\n      height = shape.height;\n    }\n    if (!shape.r) {\n      ctx.rect(x, y, width, height);\n    } else {\n      roundRectHelper.buildPath(ctx, shape);\n    }\n  };\n  Rect.prototype.isZeroArea = function () {\n    return !this.shape.width || !this.shape.height;\n  };\n  return Rect;\n}(Path);\nRect.prototype.type = 'rect';\nexport default Rect;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}