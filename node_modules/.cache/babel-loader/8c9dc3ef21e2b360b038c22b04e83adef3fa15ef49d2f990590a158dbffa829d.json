{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport { getToken } from \"@/utils/auth.js\";\nimport Cookies from \"js-cookie\";\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: 'http://localhost:9090',\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  config.headers['token'] = getToken(); //设置请求头\n\n  const admin = Cookies.get('admin');\n  if (!admin) {\n    router.push('/login').catch(err => {\n      console.log(err);\n    });\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","getToken","Cookies","router","request","create","baseURL","timeout","interceptors","use","config","headers","admin","get","push","catch","err","console","log","error","Promise","reject","response","res","data","JSON","parse"],"sources":["F:/Vue/library-management/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {getToken} from \"@/utils/auth.js\"\r\nimport Cookies from \"js-cookie\";\r\nimport router from \"@/router\";\r\n\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:9090',\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    config.headers['token'] = getToken(); //设置请求头\r\n\r\n    const admin = Cookies.get('admin');\r\n    if(!admin) {\r\n        router.push('/login').catch(err => {\r\n            console.log(err)})\r\n    }\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default request"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,QAAQ,QAAO,iBAAiB;AACxC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACzBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjED,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtC,MAAMW,KAAK,GAAGV,OAAO,CAACW,GAAG,CAAC,OAAO,CAAC;EAClC,IAAG,CAACD,KAAK,EAAE;IACPT,MAAM,CAACW,IAAI,CAAC,QAAQ,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;MAC/BC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAAA,CAAC,CAAC;EAC1B;EAEA,OAAON,MAAM;AACjB,CAAC,EAAES,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAf,OAAO,CAACI,YAAY,CAACc,QAAQ,CAACb,GAAG,CAC7Ba,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLF,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGC,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAef,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}