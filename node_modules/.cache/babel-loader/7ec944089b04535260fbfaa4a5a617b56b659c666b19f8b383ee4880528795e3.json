{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Path from './Path.js';\nvar CompoundPath = function (_super) {\n  __extends(CompoundPath, _super);\n  function CompoundPath() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'compound';\n    return _this;\n  }\n  CompoundPath.prototype._updatePathDirty = function () {\n    var paths = this.shape.paths;\n    var dirtyPath = this.shapeChanged();\n    for (var i = 0; i < paths.length; i++) {\n      dirtyPath = dirtyPath || paths[i].shapeChanged();\n    }\n    if (dirtyPath) {\n      this.dirtyShape();\n    }\n  };\n  CompoundPath.prototype.beforeBrush = function () {\n    this._updatePathDirty();\n    var paths = this.shape.paths || [];\n    var scale = this.getGlobalScale();\n    for (var i = 0; i < paths.length; i++) {\n      if (!paths[i].path) {\n        paths[i].createPathProxy();\n      }\n      paths[i].path.setScale(scale[0], scale[1], paths[i].segmentIgnoreThreshold);\n    }\n  };\n  CompoundPath.prototype.buildPath = function (ctx, shape) {\n    var paths = shape.paths || [];\n    for (var i = 0; i < paths.length; i++) {\n      paths[i].buildPath(ctx, paths[i].shape, true);\n    }\n  };\n  CompoundPath.prototype.afterBrush = function () {\n    var paths = this.shape.paths || [];\n    for (var i = 0; i < paths.length; i++) {\n      paths[i].pathUpdated();\n    }\n  };\n  CompoundPath.prototype.getBoundingRect = function () {\n    this._updatePathDirty.call(this);\n    return Path.prototype.getBoundingRect.call(this);\n  };\n  return CompoundPath;\n}(Path);\nexport default CompoundPath;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}